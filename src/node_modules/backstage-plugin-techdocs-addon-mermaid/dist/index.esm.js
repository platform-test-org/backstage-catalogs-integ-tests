import { createPlugin } from '@backstage/core-plugin-api';
import { useShadowRootElements, createTechDocsAddonExtension, TechDocsAddonLocations } from '@backstage/plugin-techdocs-react';
import { useEffect } from 'react';
import { useTheme } from '@material-ui/core';
import mermaid from 'mermaid';

const mermaidStart = /^(\s*)(graph|flowchart|sequenceDiagram|classDiagram|stateDiagram|erDiagram|journey|gantt|pie|requirementDiagram|gitGraph)/;
const isMermaidCode = (code) => {
  return code.match(mermaidStart) !== null;
};

function selectConfig(backstagePalette, properties) {
  if (properties.config) {
    return properties.config;
  }
  if (backstagePalette === "light") {
    return properties.lightConfig || {};
  }
  return properties.darkConfig || {};
}
let diagramId = 0;
const MermaidAddon = (properties) => {
  const highlightTables = useShadowRootElements([".highlighttable"]);
  const theme = useTheme();
  useEffect(() => {
    highlightTables.forEach((highlightTable) => {
      var _a;
      if (!highlightTable.classList.contains("language-text")) {
        return;
      }
      if (highlightTable.style.display === "none") {
        return;
      }
      const codeBlock = highlightTable.querySelector("code");
      if (!codeBlock) {
        return;
      }
      const diagramText = codeBlock.innerText;
      if (!isMermaidCode(diagramText)) {
        return;
      }
      highlightTable.style.display = "none";
      const diagramElement = document.createElement("div");
      diagramElement.className = "mermaid";
      (_a = highlightTable.parentNode) == null ? void 0 : _a.insertBefore(diagramElement, highlightTable.nextSibling);
      const id = `mermaid-${diagramId++}`;
      const config = selectConfig(theme.palette.type, properties);
      if (config) {
        mermaid.initialize(config);
      }
      mermaid.render(id, diagramText, (svgGraph) => {
        diagramElement.innerHTML = svgGraph;
      });
    });
  }, [highlightTables, properties, theme.palette.type]);
  return null;
};

const techdocsAddonMermaidPlugin = createPlugin({
  id: "techdocs-addon-mermaid"
});
const Mermaid = techdocsAddonMermaidPlugin.provide(
  createTechDocsAddonExtension({
    name: "MermaidDiagram",
    location: TechDocsAddonLocations.Content,
    component: MermaidAddon
  })
);

export { Mermaid, techdocsAddonMermaidPlugin };
//# sourceMappingURL=index.esm.js.map
