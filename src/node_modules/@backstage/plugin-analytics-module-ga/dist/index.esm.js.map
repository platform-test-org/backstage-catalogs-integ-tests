{"version":3,"file":"index.esm.js","sources":["../src/plugin.ts","../src/util/DeferredCapture.ts","../src/apis/implementations/AnalyticsApi/GoogleAnalytics.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createPlugin } from '@backstage/core-plugin-api';\n\n/**\n * @deprecated Importing and including this plugin in an app has no effect.\n * This will be removed in a future release.\n *\n * @public\n */\nexport const analyticsModuleGA = createPlugin({\n  id: 'analytics-provider-ga',\n});\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport ReactGA from 'react-ga';\n\ntype Hit = {\n  timestamp: number;\n  data: {\n    hitType: 'pageview' | 'event';\n    [x: string]: any;\n  };\n};\n\n/**\n * A wrapper around ReactGA that can optionally handle latent capture logic.\n *\n * - When defer is `false`, event data is sent directly to GA.\n * - When defer is `true`, event data is queued (with a timestamp), so that it\n *   can be sent to GA once externally indicated to be ready. This relies on\n *   the `qt` or `queueTime` parameter of the Measurement Protocol.\n *\n * @see https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#qt\n */\nexport class DeferredCapture {\n  /**\n   * Queue of deferred hits to be processed when ready. When undefined, hits\n   * can safely be sent without delay.\n   */\n  private queue: Hit[] | undefined;\n\n  constructor({ defer = false }: { defer: boolean }) {\n    this.queue = defer ? [] : undefined;\n  }\n\n  /**\n   * Indicates that deferred capture may now proceed.\n   */\n  setReady() {\n    if (this.queue) {\n      this.queue.forEach(this.sendDeferred);\n      this.queue = undefined;\n    }\n  }\n\n  /**\n   * Either forwards the pageview directly to GA, or (if configured) enqueues\n   * the pageview hit to be captured when ready.\n   */\n  pageview(path: string, metadata: ReactGA.FieldsObject = {}) {\n    if (this.queue) {\n      this.queue.push({\n        timestamp: Date.now(),\n        data: {\n          hitType: 'pageview',\n          page: path,\n          ...metadata,\n        },\n      });\n      return;\n    }\n\n    ReactGA.send({\n      hitType: 'pageview',\n      page: path,\n      ...metadata,\n    });\n  }\n\n  /**\n   * Either forwards the event directly to GA, or (if configured) enqueues the\n   * event hit to be captured when ready.\n   */\n  event(eventDetails: ReactGA.EventArgs) {\n    if (this.queue) {\n      this.queue.push({\n        timestamp: Date.now(),\n        data: {\n          ...eventDetails,\n          hitType: 'event',\n        },\n      });\n      return;\n    }\n\n    ReactGA.event(eventDetails);\n  }\n\n  /**\n   * Sends a given hit to GA, decorated with the correct queue time.\n   */\n  private sendDeferred(hit: Hit) {\n    // Send the hit with the appropriate queue time (`qt`).\n    ReactGA.send({\n      ...hit.data,\n      queueTime: Date.now() - hit.timestamp,\n    });\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ReactGA from 'react-ga';\nimport {\n  AnalyticsApi,\n  AnalyticsContextValue,\n  AnalyticsEventAttributes,\n  AnalyticsEvent,\n  IdentityApi,\n} from '@backstage/core-plugin-api';\nimport { Config } from '@backstage/config';\nimport { DeferredCapture } from '../../../util';\n\ntype CustomDimensionOrMetricConfig = {\n  type: 'dimension' | 'metric';\n  index: number;\n  source: 'context' | 'attributes';\n  key: string;\n};\n\n/**\n * Google Analytics API provider for the Backstage Analytics API.\n * @public\n */\nexport class GoogleAnalytics implements AnalyticsApi {\n  private readonly cdmConfig: CustomDimensionOrMetricConfig[];\n  private customUserIdTransform?: (userEntityRef: string) => Promise<string>;\n  private readonly capture: DeferredCapture;\n\n  /**\n   * Instantiate the implementation and initialize ReactGA.\n   */\n  private constructor(options: {\n    identityApi?: IdentityApi;\n    userIdTransform?: 'sha-256' | ((userEntityRef: string) => Promise<string>);\n    cdmConfig: CustomDimensionOrMetricConfig[];\n    identity: string;\n    trackingId: string;\n    scriptSrc?: string;\n    testMode: boolean;\n    debug: boolean;\n  }) {\n    const {\n      cdmConfig,\n      identity,\n      trackingId,\n      identityApi,\n      userIdTransform = 'sha-256',\n      scriptSrc,\n      testMode,\n      debug,\n    } = options;\n\n    this.cdmConfig = cdmConfig;\n\n    // Initialize Google Analytics.\n    ReactGA.initialize(trackingId, {\n      testMode,\n      debug,\n      gaAddress: scriptSrc,\n      titleCase: false,\n    });\n\n    // If identity is required, defer event capture until identity is known.\n    this.capture = new DeferredCapture({ defer: identity === 'required' });\n\n    // Allow custom userId transformation.\n    this.customUserIdTransform =\n      typeof userIdTransform === 'function' ? userIdTransform : undefined;\n\n    // Capture user only when explicitly enabled and provided.\n    if (identity !== 'disabled' && identityApi) {\n      this.setUserFrom(identityApi);\n    }\n  }\n\n  /**\n   * Instantiate a fully configured GA Analytics API implementation.\n   */\n  static fromConfig(\n    config: Config,\n    options: {\n      identityApi?: IdentityApi;\n      userIdTransform?:\n        | 'sha-256'\n        | ((userEntityRef: string) => Promise<string>);\n    } = {},\n  ) {\n    // Get all necessary configuration.\n    const trackingId = config.getString('app.analytics.ga.trackingId');\n    const scriptSrc = config.getOptionalString('app.analytics.ga.scriptSrc');\n    const identity =\n      config.getOptionalString('app.analytics.ga.identity') || 'disabled';\n    const debug = config.getOptionalBoolean('app.analytics.ga.debug') ?? false;\n    const testMode =\n      config.getOptionalBoolean('app.analytics.ga.testMode') ?? false;\n    const cdmConfig =\n      config\n        .getOptionalConfigArray('app.analytics.ga.customDimensionsMetrics')\n        ?.map(c => {\n          return {\n            type: c.getString('type') as CustomDimensionOrMetricConfig['type'],\n            index: c.getNumber('index'),\n            source: c.getString(\n              'source',\n            ) as CustomDimensionOrMetricConfig['source'],\n            key: c.getString('key'),\n          };\n        }) ?? [];\n\n    if (identity === 'required' && !options.identityApi) {\n      throw new Error(\n        'Invalid config: identity API must be provided to deps when ga.identity is required',\n      );\n    }\n\n    // Return an implementation instance.\n    return new GoogleAnalytics({\n      ...options,\n      identity,\n      trackingId,\n      scriptSrc,\n      cdmConfig,\n      testMode,\n      debug,\n    });\n  }\n\n  /**\n   * Primary event capture implementation. Handles core navigate event as a\n   * pageview and the rest as custom events. All custom dimensions/metrics are\n   * applied as they should be (set on pageview, merged object on events).\n   */\n  captureEvent(event: AnalyticsEvent) {\n    const { context, action, subject, value, attributes } = event;\n    const customMetadata = this.getCustomDimensionMetrics(context, attributes);\n\n    if (action === 'navigate' && context.extension === 'App') {\n      this.capture.pageview(subject, customMetadata);\n      return;\n    }\n\n    this.capture.event({\n      category: context.extension || 'App',\n      action,\n      label: subject,\n      value,\n      ...customMetadata,\n    });\n  }\n\n  /**\n   * Returns an object of dimensions/metrics given an Analytics Context and an\n   * Event Attributes, e.g. { dimension1: \"some value\", metric8: 42 }\n   */\n  private getCustomDimensionMetrics(\n    context: AnalyticsContextValue,\n    attributes: AnalyticsEventAttributes = {},\n  ) {\n    const customDimensionsMetrics: { [x: string]: string | number | boolean } =\n      {};\n\n    this.cdmConfig.forEach(config => {\n      const value =\n        config.source === 'context'\n          ? context[config.key]\n          : attributes[config.key];\n\n      // Never pass a non-numeric value on a metric.\n      if (config.type === 'metric' && typeof value !== 'number') {\n        return;\n      }\n\n      // Only set defined values.\n      if (value !== undefined) {\n        customDimensionsMetrics[`${config.type}${config.index}`] = value;\n      }\n    });\n\n    return customDimensionsMetrics;\n  }\n\n  /**\n   * Sets the GA userId, based on the `userEntityRef` set on the backstage\n   * identity loaded from a given Backstage Identity API instance. Because\n   * Google forbids sending any PII (including on the userId field), we hash\n   * the entire `userEntityRef` on behalf of integrators:\n   *\n   * - With value `User:default/name`, userId becomes `sha256(User:default/name)`\n   *\n   * If an integrator wishes to use an alternative hashing mechanism or an\n   * entirely different value, they may do so by passing a `userIdTransform`\n   * function alongside the `identityApi` to `GoogleAnalytics.fromConfig()`.\n   * This function receives the `userEntityRef` as an argument and should\n   * resolve to a hashed version of whatever identifier they choose.\n   *\n   * Note: this feature requires that an integrator has set up a Google\n   * Analytics User ID view in the property used to track Backstage.\n   */\n  private async setUserFrom(identityApi: IdentityApi) {\n    const { userEntityRef } = await identityApi.getBackstageIdentity();\n\n    // Prevent PII from being passed to Google Analytics.\n    const userId = await this.getPrivateUserId(userEntityRef);\n\n    // Set the user ID.\n    ReactGA.set({ userId });\n\n    // Notify the deferred capture mechanism that it may proceed.\n    this.capture.setReady();\n  }\n\n  /**\n   * Returns a PII-free (according to Google's terms of service) user ID for\n   * use in Google Analytics.\n   */\n  private getPrivateUserId(userEntityRef: string): Promise<string> {\n    // Allow integrators to provide their own hashing transformer.\n    if (this.customUserIdTransform) {\n      return this.customUserIdTransform(userEntityRef);\n    }\n\n    return this.hash(userEntityRef);\n  }\n\n  /**\n   * Simple hash function; relies on web cryptography + the sha-256 algorithm.\n   */\n  private async hash(value: string): Promise<string> {\n    const digest = await crypto.subtle.digest(\n      'sha-256',\n      new TextEncoder().encode(value),\n    );\n    const hashArray = Array.from(new Uint8Array(digest));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  }\n}\n"],"names":[],"mappings":";;;AAuBO,MAAM,oBAAoB,YAAa,CAAA;AAAA,EAC5C,EAAI,EAAA,uBAAA;AACN,CAAC;;ACUM,MAAM,eAAgB,CAAA;AAAA,EAO3B,WAAY,CAAA,EAAE,KAAQ,GAAA,KAAA,EAA6B,EAAA;AACjD,IAAK,IAAA,CAAA,KAAA,GAAQ,KAAQ,GAAA,EAAK,GAAA,KAAA,CAAA,CAAA;AAAA,GAC5B;AAAA,EAKA,QAAW,GAAA;AACT,IAAA,IAAI,KAAK,KAAO,EAAA;AACd,MAAK,IAAA,CAAA,KAAA,CAAM,OAAQ,CAAA,IAAA,CAAK,YAAY,CAAA,CAAA;AACpC,MAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA,CAAA;AAAA,KACf;AAAA,GACF;AAAA,EAMA,QAAS,CAAA,IAAA,EAAc,QAAiC,GAAA,EAAI,EAAA;AAC1D,IAAA,IAAI,KAAK,KAAO,EAAA;AACd,MAAA,IAAA,CAAK,MAAM,IAAK,CAAA;AAAA,QACd,SAAA,EAAW,KAAK,GAAI,EAAA;AAAA,QACpB,IAAM,EAAA;AAAA,UACJ,OAAS,EAAA,UAAA;AAAA,UACT,IAAM,EAAA,IAAA;AAAA,UACN,GAAG,QAAA;AAAA,SACL;AAAA,OACD,CAAA,CAAA;AACD,MAAA,OAAA;AAAA,KACF;AAEA,IAAA,OAAA,CAAQ,IAAK,CAAA;AAAA,MACX,OAAS,EAAA,UAAA;AAAA,MACT,IAAM,EAAA,IAAA;AAAA,MACN,GAAG,QAAA;AAAA,KACJ,CAAA,CAAA;AAAA,GACH;AAAA,EAMA,MAAM,YAAiC,EAAA;AACrC,IAAA,IAAI,KAAK,KAAO,EAAA;AACd,MAAA,IAAA,CAAK,MAAM,IAAK,CAAA;AAAA,QACd,SAAA,EAAW,KAAK,GAAI,EAAA;AAAA,QACpB,IAAM,EAAA;AAAA,UACJ,GAAG,YAAA;AAAA,UACH,OAAS,EAAA,OAAA;AAAA,SACX;AAAA,OACD,CAAA,CAAA;AACD,MAAA,OAAA;AAAA,KACF;AAEA,IAAA,OAAA,CAAQ,MAAM,YAAY,CAAA,CAAA;AAAA,GAC5B;AAAA,EAKQ,aAAa,GAAU,EAAA;AAE7B,IAAA,OAAA,CAAQ,IAAK,CAAA;AAAA,MACX,GAAG,GAAI,CAAA,IAAA;AAAA,MACP,SAAW,EAAA,IAAA,CAAK,GAAI,EAAA,GAAI,GAAI,CAAA,SAAA;AAAA,KAC7B,CAAA,CAAA;AAAA,GACH;AACF;;ACvEO,MAAM,eAAwC,CAAA;AAAA,EAQ3C,YAAY,OASjB,EAAA;AACD,IAAM,MAAA;AAAA,MACJ,SAAA;AAAA,MACA,QAAA;AAAA,MACA,UAAA;AAAA,MACA,WAAA;AAAA,MACA,eAAkB,GAAA,SAAA;AAAA,MAClB,SAAA;AAAA,MACA,QAAA;AAAA,MACA,KAAA;AAAA,KACE,GAAA,OAAA,CAAA;AAEJ,IAAA,IAAA,CAAK,SAAY,GAAA,SAAA,CAAA;AAGjB,IAAA,OAAA,CAAQ,WAAW,UAAY,EAAA;AAAA,MAC7B,QAAA;AAAA,MACA,KAAA;AAAA,MACA,SAAW,EAAA,SAAA;AAAA,MACX,SAAW,EAAA,KAAA;AAAA,KACZ,CAAA,CAAA;AAGD,IAAA,IAAA,CAAK,UAAU,IAAI,eAAA,CAAgB,EAAE,KAAO,EAAA,QAAA,KAAa,YAAY,CAAA,CAAA;AAGrE,IAAA,IAAA,CAAK,qBACH,GAAA,OAAO,eAAoB,KAAA,UAAA,GAAa,eAAkB,GAAA,KAAA,CAAA,CAAA;AAG5D,IAAI,IAAA,QAAA,KAAa,cAAc,WAAa,EAAA;AAC1C,MAAA,IAAA,CAAK,YAAY,WAAW,CAAA,CAAA;AAAA,KAC9B;AAAA,GACF;AAAA,EAKA,OAAO,UAAA,CACL,MACA,EAAA,OAAA,GAKI,EACJ,EAAA;AArGJ,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAuGI,IAAM,MAAA,UAAA,GAAa,MAAO,CAAA,SAAA,CAAU,6BAA6B,CAAA,CAAA;AACjE,IAAM,MAAA,SAAA,GAAY,MAAO,CAAA,iBAAA,CAAkB,4BAA4B,CAAA,CAAA;AACvE,IAAA,MAAM,QACJ,GAAA,MAAA,CAAO,iBAAkB,CAAA,2BAA2B,CAAK,IAAA,UAAA,CAAA;AAC3D,IAAA,MAAM,KAAQ,GAAA,CAAA,EAAA,GAAA,MAAA,CAAO,kBAAmB,CAAA,wBAAwB,MAAlD,IAAuD,GAAA,EAAA,GAAA,KAAA,CAAA;AACrE,IAAA,MAAM,QACJ,GAAA,CAAA,EAAA,GAAA,MAAA,CAAO,kBAAmB,CAAA,2BAA2B,MAArD,IAA0D,GAAA,EAAA,GAAA,KAAA,CAAA;AAC5D,IAAA,MAAM,aACJ,EACG,GAAA,CAAA,EAAA,GAAA,MAAA,CAAA,sBAAA,CAAuB,0CAA0C,CADpE,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAEI,IAAI,CAAK,CAAA,KAAA;AACT,MAAO,OAAA;AAAA,QACL,IAAA,EAAM,CAAE,CAAA,SAAA,CAAU,MAAM,CAAA;AAAA,QACxB,KAAA,EAAO,CAAE,CAAA,SAAA,CAAU,OAAO,CAAA;AAAA,QAC1B,QAAQ,CAAE,CAAA,SAAA;AAAA,UACR,QAAA;AAAA,SACF;AAAA,QACA,GAAA,EAAK,CAAE,CAAA,SAAA,CAAU,KAAK,CAAA;AAAA,OACxB,CAAA;AAAA,KACF,CAAA,KAXF,YAWQ,EAAC,CAAA;AAEX,IAAA,IAAI,QAAa,KAAA,UAAA,IAAc,CAAC,OAAA,CAAQ,WAAa,EAAA;AACnD,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,oFAAA;AAAA,OACF,CAAA;AAAA,KACF;AAGA,IAAA,OAAO,IAAI,eAAgB,CAAA;AAAA,MACzB,GAAG,OAAA;AAAA,MACH,QAAA;AAAA,MACA,UAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,MACA,QAAA;AAAA,MACA,KAAA;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA,EAOA,aAAa,KAAuB,EAAA;AAClC,IAAA,MAAM,EAAE,OAAS,EAAA,MAAA,EAAQ,OAAS,EAAA,KAAA,EAAO,YAAe,GAAA,KAAA,CAAA;AACxD,IAAA,MAAM,cAAiB,GAAA,IAAA,CAAK,yBAA0B,CAAA,OAAA,EAAS,UAAU,CAAA,CAAA;AAEzE,IAAA,IAAI,MAAW,KAAA,UAAA,IAAc,OAAQ,CAAA,SAAA,KAAc,KAAO,EAAA;AACxD,MAAK,IAAA,CAAA,OAAA,CAAQ,QAAS,CAAA,OAAA,EAAS,cAAc,CAAA,CAAA;AAC7C,MAAA,OAAA;AAAA,KACF;AAEA,IAAA,IAAA,CAAK,QAAQ,KAAM,CAAA;AAAA,MACjB,QAAA,EAAU,QAAQ,SAAa,IAAA,KAAA;AAAA,MAC/B,MAAA;AAAA,MACA,KAAO,EAAA,OAAA;AAAA,MACP,KAAA;AAAA,MACA,GAAG,cAAA;AAAA,KACJ,CAAA,CAAA;AAAA,GACH;AAAA,EAMQ,yBACN,CAAA,OAAA,EACA,UAAuC,GAAA,EACvC,EAAA;AACA,IAAA,MAAM,0BACJ,EAAC,CAAA;AAEH,IAAK,IAAA,CAAA,SAAA,CAAU,QAAQ,CAAU,MAAA,KAAA;AAC/B,MAAM,MAAA,KAAA,GACJ,OAAO,MAAW,KAAA,SAAA,GACd,QAAQ,MAAO,CAAA,GAAA,CAAA,GACf,WAAW,MAAO,CAAA,GAAA,CAAA,CAAA;AAGxB,MAAA,IAAI,MAAO,CAAA,IAAA,KAAS,QAAY,IAAA,OAAO,UAAU,QAAU,EAAA;AACzD,QAAA,OAAA;AAAA,OACF;AAGA,MAAA,IAAI,UAAU,KAAW,CAAA,EAAA;AACvB,QAAA,uBAAA,CAAwB,CAAG,EAAA,MAAA,CAAO,IAAO,CAAA,EAAA,MAAA,CAAO,KAAW,CAAA,CAAA,CAAA,GAAA,KAAA,CAAA;AAAA,OAC7D;AAAA,KACD,CAAA,CAAA;AAED,IAAO,OAAA,uBAAA,CAAA;AAAA,GACT;AAAA,EAmBA,MAAc,YAAY,WAA0B,EAAA;AAClD,IAAA,MAAM,EAAE,aAAA,EAAkB,GAAA,MAAM,YAAY,oBAAqB,EAAA,CAAA;AAGjE,IAAA,MAAM,MAAS,GAAA,MAAM,IAAK,CAAA,gBAAA,CAAiB,aAAa,CAAA,CAAA;AAGxD,IAAQ,OAAA,CAAA,GAAA,CAAI,EAAE,MAAA,EAAQ,CAAA,CAAA;AAGtB,IAAA,IAAA,CAAK,QAAQ,QAAS,EAAA,CAAA;AAAA,GACxB;AAAA,EAMQ,iBAAiB,aAAwC,EAAA;AAE/D,IAAA,IAAI,KAAK,qBAAuB,EAAA;AAC9B,MAAO,OAAA,IAAA,CAAK,sBAAsB,aAAa,CAAA,CAAA;AAAA,KACjD;AAEA,IAAO,OAAA,IAAA,CAAK,KAAK,aAAa,CAAA,CAAA;AAAA,GAChC;AAAA,EAKA,MAAc,KAAK,KAAgC,EAAA;AACjD,IAAM,MAAA,MAAA,GAAS,MAAM,MAAA,CAAO,MAAO,CAAA,MAAA;AAAA,MACjC,SAAA;AAAA,MACA,IAAI,WAAA,EAAc,CAAA,MAAA,CAAO,KAAK,CAAA;AAAA,KAChC,CAAA;AACA,IAAA,MAAM,YAAY,KAAM,CAAA,IAAA,CAAK,IAAI,UAAA,CAAW,MAAM,CAAC,CAAA,CAAA;AACnD,IAAA,OAAO,SAAU,CAAA,GAAA,CAAI,CAAK,CAAA,KAAA,CAAA,CAAE,QAAS,CAAA,EAAE,CAAE,CAAA,QAAA,CAAS,CAAG,EAAA,GAAG,CAAC,CAAA,CAAE,KAAK,EAAE,CAAA,CAAA;AAAA,GACpE;AACF;;;;"}