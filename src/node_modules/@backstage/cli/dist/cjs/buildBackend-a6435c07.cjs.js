'use strict';

var fs = require('fs-extra');
var path = require('path');
var webpack = require('webpack');
require('fork-ts-checker-webpack-plugin');
require('html-webpack-plugin');
require('react-dev-utils/ModuleScopePlugin');
require('run-script-webpack-plugin');
require('webpack-node-externals');
require('@backstage/cli-common');
require('@manypkg/get-packages');
var paths = require('./paths-a9c09204.cjs.js');
require('mini-css-extract-plugin');
require('@pmmmwh/react-refresh-webpack-plugin');
require('./index-882e66b6.cjs.js');
require('./run-519762e1.cjs.js');
require('eslint-webpack-plugin');
require('lodash/pickBy');
var yn = require('yn');
var FileSizeReporter = require('react-dev-utils/FileSizeReporter');
var formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');
var chalk = require('chalk');
require('webpack-dev-server');
require('react-dev-utils/openBrowser');
var parallel = require('./parallel-a8f6219c.cjs.js');
var config = require('./config-0024efa1.cjs.js');
var os = require('os');
var tar = require('tar');
var createDistWorkspace = require('./createDistWorkspace-9d21f1c1.cjs.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var webpack__default = /*#__PURE__*/_interopDefaultLegacy(webpack);
var yn__default = /*#__PURE__*/_interopDefaultLegacy(yn);
var formatWebpackMessages__default = /*#__PURE__*/_interopDefaultLegacy(formatWebpackMessages);
var chalk__default = /*#__PURE__*/_interopDefaultLegacy(chalk);
var os__default = /*#__PURE__*/_interopDefaultLegacy(os);
var tar__default = /*#__PURE__*/_interopDefaultLegacy(tar);

const WARN_AFTER_BUNDLE_GZIP_SIZE = 512 * 1024;
const WARN_AFTER_CHUNK_GZIP_SIZE = 1024 * 1024;
async function buildBundle(options) {
  const { statsJsonEnabled, schema: configSchema } = options;
  const paths$1 = paths.resolveBundlingPaths(options);
  const config = await paths.createConfig(paths$1, {
    ...options,
    checksEnabled: false,
    isDev: false,
    baseUrl: paths.resolveBaseUrl(options.frontendConfig)
  });
  const compiler = webpack__default["default"](config);
  const isCi = yn__default["default"](process.env.CI, { default: false });
  const previousFileSizes = await FileSizeReporter.measureFileSizesBeforeBuild(paths$1.targetDist);
  await fs__default["default"].emptyDir(paths$1.targetDist);
  if (paths$1.targetPublic) {
    await fs__default["default"].copy(paths$1.targetPublic, paths$1.targetDist, {
      dereference: true,
      filter: (file) => file !== paths$1.targetHtml
    });
  }
  if (configSchema) {
    await fs__default["default"].writeJson(
      path.resolve(paths$1.targetDist, ".config-schema.json"),
      configSchema.serialize(),
      { spaces: 2 }
    );
  }
  const { stats } = await build(compiler, isCi).catch((error) => {
    console.log(chalk__default["default"].red("Failed to compile.\n"));
    throw new Error(`Failed to compile.
${error.message || error}`);
  });
  if (!stats) {
    throw new Error("No stats returned");
  }
  if (statsJsonEnabled) {
    await require("bfj").write(
      path.resolve(paths$1.targetDist, "bundle-stats.json"),
      stats.toJson()
    );
  }
  FileSizeReporter.printFileSizesAfterBuild(
    stats,
    previousFileSizes,
    paths$1.targetDist,
    WARN_AFTER_BUNDLE_GZIP_SIZE,
    WARN_AFTER_CHUNK_GZIP_SIZE
  );
}
async function build(compiler, isCi) {
  var _a, _b;
  const stats = await new Promise(
    (resolve, reject) => {
      compiler.run((err, buildStats) => {
        if (err) {
          if (err.message) {
            const { errors: errors2 } = formatWebpackMessages__default["default"]({
              errors: [err.message],
              warnings: new Array(),
              _showErrors: true,
              _showWarnings: true
            });
            throw new Error(errors2[0]);
          } else {
            reject(err);
          }
        } else {
          resolve(buildStats);
        }
      });
    }
  );
  if (!stats) {
    throw new Error("No stats provided");
  }
  const serializedStats = stats.toJson({
    all: false,
    warnings: true,
    errors: true
  });
  const { errors, warnings } = formatWebpackMessages__default["default"]({
    errors: (_a = serializedStats.errors) == null ? void 0 : _a.map((e) => e.message ? e.message : e),
    warnings: (_b = serializedStats.warnings) == null ? void 0 : _b.map((e) => e.message ? e.message : e)
  });
  if (errors.length) {
    throw new Error(errors[0]);
  }
  if (isCi && warnings.length) {
    console.log(
      chalk__default["default"].yellow(
        "\nTreating warnings as errors because process.env.CI = true.\n"
      )
    );
    throw new Error(warnings.join("\n\n"));
  }
  return { stats };
}

async function buildFrontend(options) {
  const { targetDir, writeStats, configPaths } = options;
  const { name } = await fs__default["default"].readJson(path.resolve(targetDir, "package.json"));
  await buildBundle({
    targetDir,
    entry: "src/index",
    parallelism: parallel.getEnvironmentParallelism(),
    statsJsonEnabled: writeStats,
    ...await config.loadCliConfig({
      args: configPaths,
      fromPackage: name
    })
  });
}

const BUNDLE_FILE = "bundle.tar.gz";
const SKELETON_FILE = "skeleton.tar.gz";
async function buildBackend(options) {
  const { targetDir, skipBuildDependencies } = options;
  const pkg = await fs__default["default"].readJson(path.resolve(targetDir, "package.json"));
  await createDistWorkspace.buildPackage({
    targetDir: options.targetDir,
    outputs: /* @__PURE__ */ new Set([createDistWorkspace.Output.cjs])
  });
  const tmpDir = await fs__default["default"].mkdtemp(path.resolve(os__default["default"].tmpdir(), "backstage-bundle"));
  try {
    await createDistWorkspace.createDistWorkspace([pkg.name], {
      targetDir: tmpDir,
      buildDependencies: !skipBuildDependencies,
      buildExcludes: [pkg.name],
      parallelism: parallel.getEnvironmentParallelism(),
      skeleton: SKELETON_FILE
    });
    const distDir = path.resolve(targetDir, "dist");
    await fs__default["default"].remove(distDir);
    await fs__default["default"].mkdir(distDir);
    await fs__default["default"].move(
      path.resolve(tmpDir, SKELETON_FILE),
      path.resolve(distDir, SKELETON_FILE)
    );
    await tar__default["default"].create(
      {
        file: path.resolve(distDir, BUNDLE_FILE),
        cwd: tmpDir,
        portable: true,
        noMtime: true,
        gzip: true
      },
      [""]
    );
  } finally {
    await fs__default["default"].remove(tmpDir);
  }
}

exports.buildBackend = buildBackend;
exports.buildFrontend = buildFrontend;
//# sourceMappingURL=buildBackend-a6435c07.cjs.js.map
