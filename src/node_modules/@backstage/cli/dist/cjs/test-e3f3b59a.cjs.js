'use strict';

var PackageGraph = require('./PackageGraph-5171a7a0.cjs.js');
var index = require('./index-882e66b6.cjs.js');
var run = require('./run-519762e1.cjs.js');
require('path');
require('@manypkg/get-packages');
require('@backstage/errors');
require('child_process');
require('util');
require('commander');
require('chalk');
require('fs-extra');
require('semver');
require('@backstage/cli-common');

function includesAnyOf(hayStack, ...needles) {
  for (const needle of needles) {
    if (hayStack.includes(needle)) {
      return true;
    }
  }
  return false;
}
function removeOptionArg(args, option) {
  let changed = false;
  do {
    changed = false;
    const index = args.indexOf(option);
    if (index >= 0) {
      changed = true;
      args.splice(index, 2);
    }
    const indexEq = args.findIndex((arg) => arg.startsWith(`${option}=`));
    if (indexEq >= 0) {
      changed = true;
      args.splice(indexEq, 1);
    }
  } while (changed);
}
async function command(opts, cmd) {
  let parent = cmd;
  while (parent.parent) {
    parent = parent.parent;
  }
  const allArgs = parent.args;
  const args = allArgs.slice(allArgs.indexOf("test") + 1);
  if (!includesAnyOf(args, "-c", "--config")) {
    args.push("--config", index.paths.resolveOwn("config/jest.js"));
  }
  if (!includesAnyOf(args, "--no-passWithNoTests", "--passWithNoTests=false")) {
    args.push("--passWithNoTests");
  }
  if (!process.env.CI && !args.includes("--coverage") && !includesAnyOf(args, "--no-watch", "--watch=false", "--watchAll=false") && !includesAnyOf(args, "--watch", "--watchAll")) {
    const isGitRepo = () => run.runCheck("git", "rev-parse", "--is-inside-work-tree");
    const isMercurialRepo = () => run.runCheck("hg", "--cwd", ".", "root");
    if (await isGitRepo() || await isMercurialRepo()) {
      args.push("--watch");
    } else {
      args.push("--watchAll");
    }
  }
  if (opts.since) {
    removeOptionArg(args, "--since");
  }
  if (opts.since && !args.some((arg) => arg.startsWith("--selectProjects"))) {
    const packages = await PackageGraph.PackageGraph.listTargetPackages();
    const graph = PackageGraph.PackageGraph.fromPackages(packages);
    const changedPackages = await graph.listChangedPackages({
      ref: opts.since
    });
    const packageNames = Array.from(
      graph.collectPackageNames(
        changedPackages.map((pkg) => pkg.name),
        (pkg) => pkg.allLocalDependents.keys()
      )
    );
    if (packageNames.length === 0) {
      console.log(`No packages changed since ${opts.since}`);
      return;
    }
    args.push("--selectProjects", ...packageNames);
  }
  if (!process.env.NODE_ENV) {
    process.env.NODE_ENV = "test";
  }
  if (!process.env.TZ) {
    process.env.TZ = "UTC";
  }
  if (args.includes("--jest-help")) {
    removeOptionArg(args, "--jest-help");
    args.push("--help");
    process.stdout._handle.setBlocking(true);
  }
  await require("jest").run(args);
}

exports.command = command;
//# sourceMappingURL=test-e3f3b59a.cjs.js.map
