/// <reference types="react" />
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import { StorageApi, FetchApi, DiscoveryApi, ErrorApi, IdentityApi, StorageValueSnapshot, IconComponent, ApiRef, ProfileInfoApi, SessionApi, ProfileInfo } from '@backstage/core-plugin-api';
import { JsonValue, Observable } from '@backstage/types';
import { PropsWithChildren } from 'react';

/**
 * An implementation of the storage API, that uses the user-settings backend to
 * persist the data in the DB.
 *
 * @public
 */
declare class UserSettingsStorage implements StorageApi {
    private readonly namespace;
    private readonly fetchApi;
    private readonly discoveryApi;
    private readonly errorApi;
    private readonly identityApi;
    private readonly fallback;
    private subscribers;
    private readonly observables;
    private constructor();
    static create(options: {
        fetchApi: FetchApi;
        discoveryApi: DiscoveryApi;
        errorApi: ErrorApi;
        identityApi: IdentityApi;
        namespace?: string;
    }): UserSettingsStorage;
    forBucket(name: string): StorageApi;
    remove(key: string): Promise<void>;
    set<T extends JsonValue>(key: string, data: T): Promise<void>;
    observe$<T extends JsonValue>(key: string): Observable<StorageValueSnapshot<T>>;
    snapshot<T extends JsonValue>(key: string): StorageValueSnapshot<T>;
    private get;
    private getFetchUrl;
    private notifyChanges;
    private isSignedIn;
}

/** @public */
declare const userSettingsPlugin: _backstage_core_plugin_api.BackstagePlugin<{
    settingsPage: _backstage_core_plugin_api.RouteRef<undefined>;
}, {}, {}>;
/** @public */
declare const UserSettingsPage: (props: {
    providerSettings?: JSX.Element | undefined;
}) => JSX.Element;

/** @public */
declare const Settings: (props: {
    icon?: IconComponent;
}) => JSX.Element;

/**
 * @public
 */
declare const SettingsPage: (props: {
    providerSettings?: JSX.Element;
}) => JSX.Element;

/** @public */
declare const UserSettingsAuthProviders: (props: {
    providerSettings?: JSX.Element;
}) => JSX.Element;

/** @public */
declare const DefaultProviderSettings: (props: {
    configuredProviders: string[];
}) => JSX.Element;

/** @public */
declare const ProviderSettingsItem: (props: {
    title: string;
    description: string;
    icon: IconComponent;
    apiRef: ApiRef<ProfileInfoApi & SessionApi>;
}) => JSX.Element;

/** @public */
declare const UserSettingsGeneral: () => JSX.Element;

/** @public */
declare const UserSettingsProfileCard: () => JSX.Element;

/** @public */
declare const UserSettingsMenu: () => JSX.Element;

/** @public */
declare const UserSettingsSignInAvatar: (props: {
    size?: number;
}) => JSX.Element;

/** @public */
declare const UserSettingsAppearanceCard: () => JSX.Element;

/** @public */
declare const UserSettingsThemeToggle: () => JSX.Element;

/** @public */
declare const UserSettingsPinToggle: () => JSX.Element;

/** @public */
declare const UserSettingsIdentityCard: () => JSX.Element;

/** @public */
declare const UserSettingsFeatureFlags: () => JSX.Element;

/** @public */
declare const useUserProfile: () => {
    profile: ProfileInfo;
    displayName: string;
    loading: boolean;
    backstageIdentity?: undefined;
} | {
    profile: ProfileInfo;
    backstageIdentity: _backstage_core_plugin_api.BackstageUserIdentity;
    displayName: string;
    loading: false;
};

/** @public */
declare const USER_SETTINGS_TAB_KEY = "user-settings.tab";
/** @public */
declare type UserSettingsTabProps = PropsWithChildren<{
    /**
     * The path to the tab in the settings route
     * @example `/settings/advanced`
     */
    path: string;
    /** The title of the tab. It will also reflect in the document title when the tab is active */
    title: string;
}>;
/**
 * Renders a tab inside the settings page
 * @param props - Component props
 * @public
 */
declare const UserSettingsTab: (props: UserSettingsTabProps) => JSX.Element;

export { DefaultProviderSettings, ProviderSettingsItem, SettingsPage as Router, Settings, USER_SETTINGS_TAB_KEY, UserSettingsAppearanceCard, UserSettingsAuthProviders, UserSettingsFeatureFlags, UserSettingsGeneral, UserSettingsIdentityCard, UserSettingsMenu, UserSettingsPage, UserSettingsPinToggle, UserSettingsProfileCard, UserSettingsSignInAvatar, UserSettingsStorage, UserSettingsTab, UserSettingsTabProps, UserSettingsThemeToggle, userSettingsPlugin as plugin, useUserProfile, userSettingsPlugin };
