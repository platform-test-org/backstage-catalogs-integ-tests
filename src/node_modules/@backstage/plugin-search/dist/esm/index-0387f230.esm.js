import React, { useContext, useState, useCallback, useEffect, Fragment, cloneElement } from 'react';
import { Dialog, useTheme, DialogTitle, Paper, DialogContent, Grid, Divider, List, DialogActions, makeStyles as makeStyles$1, Card, CardHeader, CardContent, Accordion, AccordionSummary, AccordionDetails, ListItem, ListItemIcon, ListItemText, Tabs, Tab, FormControl, InputLabel, Select, Chip, MenuItem, Checkbox } from '@material-ui/core';
import LaunchIcon from '@material-ui/icons/Launch';
import { makeStyles } from '@material-ui/core/styles';
import { searchApiRef, SearchContextProvider, useSearch, SearchBar, SearchResult, DefaultResultListItem, SearchResultPager } from '@backstage/plugin-search-react';
import { createRouteRef, createPlugin, createApiFactory, discoveryApiRef, identityApiRef, createRoutableExtension, createComponentExtension, useRouteRef } from '@backstage/core-plugin-api';
import { useContent, Link, SidebarSearchField } from '@backstage/core-components';
import { ResponseError } from '@backstage/errors';
import qs from 'qs';
import { createVersionedContext, createVersionedValueMap } from '@backstage/version-bridge';
import usePrevious from 'react-use/lib/usePrevious';
import { useOutlet, useLocation } from 'react-router';
import useEffectOnce from 'react-use/lib/useEffectOnce';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import AllIcon from '@material-ui/icons/FontDownload';
import { useNavigate } from 'react-router-dom';

class SearchClient {
  constructor(options) {
    this.discoveryApi = options.discoveryApi;
    this.identityApi = options.identityApi;
  }
  async query(query) {
    const { token } = await this.identityApi.getCredentials();
    const queryString = qs.stringify(query);
    const url = `${await this.discoveryApi.getBaseUrl(
      "search/query"
    )}?${queryString}`;
    const response = await fetch(url, {
      headers: token ? { Authorization: `Bearer ${token}` } : {}
    });
    if (!response.ok) {
      throw await ResponseError.fromResponse(response);
    }
    return response.json();
  }
}

const rootRouteRef = createRouteRef({
  id: "search"
});
const searchPlugin = createPlugin({
  id: "search",
  apis: [
    createApiFactory({
      api: searchApiRef,
      deps: { discoveryApi: discoveryApiRef, identityApi: identityApiRef },
      factory: ({ discoveryApi, identityApi }) => {
        return new SearchClient({ discoveryApi, identityApi });
      }
    })
  ],
  routes: {
    root: rootRouteRef
  }
});
const SearchPage$1 = searchPlugin.provide(
  createRoutableExtension({
    name: "SearchPage",
    component: () => import('./index-559e7a70.esm.js').then((m) => m.SearchPage),
    mountPoint: rootRouteRef
  })
);
const SidebarSearchModal = searchPlugin.provide(
  createComponentExtension({
    name: "SidebarSearchModal",
    component: {
      lazy: () => import('./index-0a13cd80.esm.js').then(
        (m) => m.SidebarSearchModal
      )
    }
  })
);
const HomePageSearchBar = searchPlugin.provide(
  createComponentExtension({
    name: "HomePageSearchBar",
    component: {
      lazy: () => import('./index-4003b03a.esm.js').then((m) => m.HomePageSearchBar)
    }
  })
);

const useStyles$3 = makeStyles((theme) => ({
  container: {
    borderRadius: 30,
    display: "flex",
    height: "2.4em"
  },
  input: {
    flex: 1
  },
  paperFullWidth: { height: "calc(100% - 128px)" },
  dialogActionsContainer: { padding: theme.spacing(1, 3) },
  viewResultsLink: { verticalAlign: "0.5em" }
}));
const Modal = ({ toggleModal }) => {
  const getSearchLink = useRouteRef(rootRouteRef);
  const classes = useStyles$3();
  const { term } = useSearch();
  const { focusContent } = useContent();
  const { transitions } = useTheme();
  const handleResultClick = () => {
    toggleModal();
    setTimeout(focusContent, transitions.duration.leavingScreen);
  };
  const handleKeyPress = () => {
    handleResultClick();
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(DialogTitle, null, /* @__PURE__ */ React.createElement(Paper, {
    className: classes.container
  }, /* @__PURE__ */ React.createElement(SearchBar, {
    className: classes.input
  }))), /* @__PURE__ */ React.createElement(DialogContent, null, /* @__PURE__ */ React.createElement(Grid, {
    container: true,
    direction: "row-reverse",
    justifyContent: "flex-start",
    alignItems: "center"
  }, /* @__PURE__ */ React.createElement(Grid, {
    item: true
  }, /* @__PURE__ */ React.createElement(Link, {
    onClick: () => {
      toggleModal();
      setTimeout(focusContent, transitions.duration.leavingScreen);
    },
    to: `${getSearchLink()}?query=${term}`
  }, /* @__PURE__ */ React.createElement("span", {
    className: classes.viewResultsLink
  }, "View Full Results"), /* @__PURE__ */ React.createElement(LaunchIcon, {
    color: "primary"
  })))), /* @__PURE__ */ React.createElement(Divider, null), /* @__PURE__ */ React.createElement(SearchResult, null, ({ results }) => /* @__PURE__ */ React.createElement(List, null, results.map(({ document, highlight }) => /* @__PURE__ */ React.createElement("div", {
    role: "button",
    tabIndex: 0,
    key: `${document.location}-btn`,
    onClick: handleResultClick,
    onKeyPress: handleKeyPress
  }, /* @__PURE__ */ React.createElement(DefaultResultListItem, {
    key: document.location,
    result: document,
    highlight
  })))))), /* @__PURE__ */ React.createElement(DialogActions, {
    className: classes.dialogActionsContainer
  }, /* @__PURE__ */ React.createElement(Grid, {
    container: true,
    direction: "row"
  }, /* @__PURE__ */ React.createElement(Grid, {
    item: true,
    xs: 12
  }, /* @__PURE__ */ React.createElement(SearchResultPager, null)))));
};
const SearchModal = ({
  open = true,
  hidden,
  toggleModal,
  children
}) => {
  var _a;
  const classes = useStyles$3();
  return /* @__PURE__ */ React.createElement(Dialog, {
    classes: {
      paperFullWidth: classes.paperFullWidth
    },
    onClose: toggleModal,
    "aria-labelledby": "search-modal-title",
    fullWidth: true,
    maxWidth: "lg",
    open,
    hidden
  }, open && /* @__PURE__ */ React.createElement(SearchContextProvider, {
    inheritParentContextIfAvailable: true
  }, (_a = children && children({ toggleModal })) != null ? _a : /* @__PURE__ */ React.createElement(Modal, {
    toggleModal
  })));
};

const SearchModalContext = createVersionedContext("search-modal-context");
const SearchModalProvider = ({
  children,
  showInitially
}) => {
  const value = useSearchModal(showInitially);
  const versionedValue = createVersionedValueMap({ 1: value });
  return /* @__PURE__ */ React.createElement(SearchModalContext.Provider, {
    value: versionedValue
  }, children);
};
function useSearchModal(initialState = false) {
  const parentContext = useContext(SearchModalContext);
  const parentContextValue = parentContext == null ? void 0 : parentContext.atVersion(1);
  const [state, setState] = useState({
    hidden: !initialState,
    open: initialState
  });
  const toggleModal = useCallback(
    () => setState((prevState) => ({
      open: true,
      hidden: !prevState.hidden
    })),
    []
  );
  const setOpen = useCallback(
    (open) => setState((prevState) => ({
      open: prevState.open || open,
      hidden: !open
    })),
    []
  );
  return (parentContextValue == null ? void 0 : parentContextValue.state) ? parentContextValue : { state, toggleModal, setOpen };
}

const UrlUpdater = () => {
  const location = useLocation();
  const {
    term,
    setTerm,
    types,
    setTypes,
    pageCursor,
    setPageCursor,
    filters,
    setFilters
  } = useSearch();
  const prevQueryParams = usePrevious(location.search);
  useEffect(() => {
    if (location.search === prevQueryParams) {
      return;
    }
    const query = qs.parse(location.search.substring(1), { arrayLimit: 0 }) || {};
    if (query.filters) {
      setFilters(query.filters);
    }
    if (query.query) {
      setTerm(query.query);
    }
    if (query.pageCursor) {
      setPageCursor(query.pageCursor);
    }
    if (query.types) {
      setTypes(query.types);
    }
  }, [prevQueryParams, location, setTerm, setTypes, setPageCursor, setFilters]);
  useEffect(() => {
    const newParams = qs.stringify(
      {
        query: term,
        types,
        pageCursor,
        filters
      },
      { arrayFormat: "brackets" }
    );
    const newUrl = `${window.location.pathname}?${newParams}`;
    window.history.replaceState(null, document.title, newUrl);
  }, [term, types, pageCursor, filters]);
  return null;
};
const SearchPage = () => {
  const outlet = useOutlet();
  return /* @__PURE__ */ React.createElement(SearchContextProvider, null, /* @__PURE__ */ React.createElement(UrlUpdater, null), outlet);
};

const useStyles$2 = makeStyles$1((theme) => ({
  card: {
    backgroundColor: "rgba(0, 0, 0, .11)"
  },
  cardContent: {
    paddingTop: theme.spacing(1)
  },
  icon: {
    color: theme.palette.common.black
  },
  list: {
    width: "100%"
  },
  listItemIcon: {
    width: "24px",
    height: "24px"
  },
  accordion: {
    backgroundColor: theme.palette.background.paper
  },
  accordionSummary: {
    minHeight: "auto",
    "&.Mui-expanded": {
      minHeight: "auto"
    }
  },
  accordionSummaryContent: {
    margin: theme.spacing(2, 0),
    "&.Mui-expanded": {
      margin: theme.spacing(2, 0)
    }
  },
  accordionDetails: {
    padding: theme.spacing(0, 0, 1)
  }
}));
const SearchTypeAccordion = (props) => {
  const classes = useStyles$2();
  const { setPageCursor, setTypes, types } = useSearch();
  const [expanded, setExpanded] = useState(true);
  const { defaultValue, name, types: givenTypes } = props;
  const toggleExpanded = () => setExpanded((prevState) => !prevState);
  const handleClick = (type) => {
    return () => {
      setTypes(type !== "" ? [type] : []);
      setPageCursor(void 0);
      setExpanded(false);
    };
  };
  useEffect(() => {
    if (defaultValue) {
      setTypes([defaultValue]);
    }
  }, []);
  const definedTypes = [
    {
      value: "",
      name: "All",
      icon: /* @__PURE__ */ React.createElement(AllIcon, null)
    },
    ...givenTypes
  ];
  const selected = types[0] || "";
  return /* @__PURE__ */ React.createElement(Card, {
    className: classes.card
  }, /* @__PURE__ */ React.createElement(CardHeader, {
    title: name,
    titleTypographyProps: { variant: "overline" }
  }), /* @__PURE__ */ React.createElement(CardContent, {
    className: classes.cardContent
  }, /* @__PURE__ */ React.createElement(Accordion, {
    className: classes.accordion,
    expanded,
    onChange: toggleExpanded
  }, /* @__PURE__ */ React.createElement(AccordionSummary, {
    classes: {
      root: classes.accordionSummary,
      content: classes.accordionSummaryContent
    },
    expandIcon: /* @__PURE__ */ React.createElement(ExpandMoreIcon, {
      className: classes.icon
    }),
    IconButtonProps: { size: "small" }
  }, expanded ? "Collapse" : definedTypes.filter((t) => t.value === selected)[0].name), /* @__PURE__ */ React.createElement(AccordionDetails, {
    classes: { root: classes.accordionDetails }
  }, /* @__PURE__ */ React.createElement(List, {
    className: classes.list,
    component: "nav",
    "aria-label": "filter by type",
    disablePadding: true,
    dense: true
  }, definedTypes.map((type) => /* @__PURE__ */ React.createElement(Fragment, {
    key: type.value
  }, /* @__PURE__ */ React.createElement(Divider, null), /* @__PURE__ */ React.createElement(ListItem, {
    selected: types[0] === type.value || types.length === 0 && type.value === "",
    onClick: handleClick(type.value),
    button: true
  }, /* @__PURE__ */ React.createElement(ListItemIcon, null, cloneElement(type.icon, {
    className: classes.listItemIcon
  })), /* @__PURE__ */ React.createElement(ListItemText, {
    primary: type.name
  })))))))));
};

const useStyles$1 = makeStyles$1((theme) => ({
  tabs: {
    borderBottom: `1px solid ${theme.palette.textVerySubtle}`,
    padding: theme.spacing(0, 4)
  },
  tab: {
    height: "50px",
    fontWeight: theme.typography.fontWeightBold,
    fontSize: theme.typography.pxToRem(13),
    color: theme.palette.textSubtle,
    minWidth: "130px"
  }
}));
const SearchTypeTabs = (props) => {
  const classes = useStyles$1();
  const { setPageCursor, setTypes, types } = useSearch();
  const { defaultValue, types: givenTypes } = props;
  const changeTab = (_, newType) => {
    setTypes(newType !== "" ? [newType] : []);
    setPageCursor(void 0);
  };
  useEffect(() => {
    if (defaultValue) {
      setTypes([defaultValue]);
    }
  }, []);
  const definedTypes = [
    {
      value: "",
      name: "All"
    },
    ...givenTypes
  ];
  return /* @__PURE__ */ React.createElement(Tabs, {
    className: classes.tabs,
    indicatorColor: "primary",
    value: types.length === 0 ? "" : types[0],
    onChange: changeTab
  }, definedTypes.map((type, idx) => /* @__PURE__ */ React.createElement(Tab, {
    key: idx,
    className: classes.tab,
    disableRipple: true,
    label: type.name,
    value: type.value
  })));
};

const useStyles = makeStyles$1((theme) => ({
  label: {
    textTransform: "capitalize"
  },
  chips: {
    display: "flex",
    flexWrap: "wrap",
    marginTop: theme.spacing(1)
  },
  chip: {
    margin: 2
  }
}));
const SearchType = (props) => {
  const { className, defaultValue, name, values = [] } = props;
  const classes = useStyles();
  const { types, setTypes } = useSearch();
  useEffectOnce(() => {
    if (!types.length) {
      if (defaultValue && Array.isArray(defaultValue)) {
        setTypes(defaultValue);
      } else if (defaultValue) {
        setTypes([defaultValue]);
      }
    }
  });
  const handleChange = (e) => {
    const value = e.target.value;
    setTypes(value);
  };
  return /* @__PURE__ */ React.createElement(FormControl, {
    className,
    variant: "filled",
    fullWidth: true,
    "data-testid": "search-typefilter-next"
  }, /* @__PURE__ */ React.createElement(InputLabel, {
    className: classes.label,
    margin: "dense"
  }, name), /* @__PURE__ */ React.createElement(Select, {
    multiple: true,
    variant: "outlined",
    value: types,
    onChange: handleChange,
    placeholder: "All Results",
    renderValue: (selected) => /* @__PURE__ */ React.createElement("div", {
      className: classes.chips
    }, selected.map((value) => /* @__PURE__ */ React.createElement(Chip, {
      key: value,
      label: value,
      className: classes.chip,
      size: "small"
    })))
  }, values.map((value) => /* @__PURE__ */ React.createElement(MenuItem, {
    key: value,
    value
  }, /* @__PURE__ */ React.createElement(Checkbox, {
    checked: types.indexOf(value) > -1
  }), /* @__PURE__ */ React.createElement(ListItemText, {
    primary: value
  })))));
};
SearchType.Accordion = (props) => {
  return /* @__PURE__ */ React.createElement(SearchTypeAccordion, {
    ...props
  });
};
SearchType.Tabs = (props) => {
  return /* @__PURE__ */ React.createElement(SearchTypeTabs, {
    ...props
  });
};

const SidebarSearch = (props) => {
  const searchRoute = useRouteRef(rootRouteRef);
  const { focusContent } = useContent();
  const navigate = useNavigate();
  const handleSearch = useCallback(
    (query) => {
      const queryString = qs.stringify({ query }, { addQueryPrefix: true });
      focusContent();
      navigate(`${searchRoute()}${queryString}`);
    },
    [focusContent, navigate, searchRoute]
  );
  return /* @__PURE__ */ React.createElement(SidebarSearchField, {
    icon: props.icon,
    onSearch: handleSearch,
    to: "/search"
  });
};

export { HomePageSearchBar as H, SearchPage as S, SearchModalProvider as a, SearchModal as b, SearchType as c, SidebarSearch as d, SearchPage$1 as e, SidebarSearchModal as f, rootRouteRef as r, searchPlugin as s, useSearchModal as u };
//# sourceMappingURL=index-0387f230.esm.js.map
