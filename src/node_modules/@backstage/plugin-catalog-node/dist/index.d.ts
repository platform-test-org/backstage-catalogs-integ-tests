/**
 * The catalog-backend-node module for `@backstage/plugin-catalog-backend`.
 *
 * @packageDocumentation
 */

/// <reference types="node" />

import { CatalogApi } from '@backstage/catalog-client';
import { CompoundEntityRef } from '@backstage/catalog-model';
import { Entity } from '@backstage/catalog-model';
import { ExtensionPoint } from '@backstage/backend-plugin-api';
import { JsonValue } from '@backstage/types';
import { LocationSpec as LocationSpec_2 } from '@backstage/plugin-catalog-common';
import { ServiceRef } from '@backstage/backend-plugin-api';

/* Excluded from this release type: CatalogProcessingExtensionPoint */

/* Excluded from this release type: catalogProcessingExtensionPoint */

/**
 * @public
 */
export declare type CatalogProcessor = {
    /**
     * A unique identifier for the Catalog Processor.
     */
    getProcessorName(): string;
    /**
     * Reads the contents of a location.
     *
     * @param location - The location to read
     * @param optional - Whether a missing target should trigger an error
     * @param emit - A sink for items resulting from the read
     * @param parser - A parser, that is able to take the raw catalog descriptor
     *               data and turn it into the actual result pieces.
     * @param cache - A cache for storing values local to this processor and the current entity.
     * @returns True if handled by this processor, false otherwise
     */
    readLocation?(location: LocationSpec_2, optional: boolean, emit: CatalogProcessorEmit, parser: CatalogProcessorParser, cache: CatalogProcessorCache): Promise<boolean>;
    /**
     * Pre-processes an emitted entity, after it has been emitted but before it
     * has been validated.
     *
     * This type of processing usually involves enriching the entity with
     * additional data, and the input entity may actually still be incomplete
     * when the processor is invoked.
     *
     * @param entity - The (possibly partial) entity to process
     * @param location - The location that the entity came from
     * @param emit - A sink for auxiliary items resulting from the processing
     * @param originLocation - The location that the entity originally came from.
     *   While location resolves to the direct parent location, originLocation
     *   tells which location was used to start the ingestion loop.
     * @param cache - A cache for storing values local to this processor and the current entity.
     * @returns The same entity or a modified version of it
     */
    preProcessEntity?(entity: Entity, location: LocationSpec_2, emit: CatalogProcessorEmit, originLocation: LocationSpec_2, cache: CatalogProcessorCache): Promise<Entity>;
    /**
     * Validates the entity as a known entity kind, after it has been pre-
     * processed and has passed through basic overall validation.
     *
     * @param entity - The entity to validate
     * @returns Resolves to true, if the entity was of a kind that was known and
     *   handled by this processor, and was found to be valid. Resolves to false,
     *   if the entity was not of a kind that was known by this processor.
     *   Rejects to an Error describing the problem, if the entity was of a kind
     *   that was known by this processor and was not valid.
     */
    validateEntityKind?(entity: Entity): Promise<boolean>;
    /**
     * Post-processes an emitted entity, after it has been validated.
     *
     * @param entity - The entity to process
     * @param location - The location that the entity came from
     * @param emit - A sink for auxiliary items resulting from the processing
     * @param cache - A cache for storing values local to this processor and the current entity.
     * @returns The same entity or a modified version of it
     */
    postProcessEntity?(entity: Entity, location: LocationSpec_2, emit: CatalogProcessorEmit, cache: CatalogProcessorCache): Promise<Entity>;
};

/**
 * A cache for storing data during processing.
 *
 * The values stored in the cache are always local to each processor, meaning
 * no processor can see cache values from other processors.
 *
 * The cache instance provided to the CatalogProcessor is also scoped to the
 * entity being processed, meaning that each processor run can't see cache
 * values from processing runs for other entities.
 *
 * Values that are set during a processing run will only be visible in the directly
 * following run. The cache will be overwritten every run unless no new cache items
 * are written, in which case the existing values remain in the cache.
 *
 * @public
 */
export declare interface CatalogProcessorCache {
    /**
     * Retrieve a value from the cache.
     */
    get<ItemType extends JsonValue>(key: string): Promise<ItemType | undefined>;
    /**
     * Store a value in the cache.
     */
    set<ItemType extends JsonValue>(key: string, value: ItemType): Promise<void>;
}

/** @public */
export declare type CatalogProcessorEmit = (generated: CatalogProcessorResult) => void;

/** @public */
export declare type CatalogProcessorEntityResult = {
    type: 'entity';
    entity: Entity;
    location: LocationSpec_2;
};

/** @public */
export declare type CatalogProcessorErrorResult = {
    type: 'error';
    error: Error;
    location: LocationSpec_2;
};

/** @public */
export declare type CatalogProcessorLocationResult = {
    type: 'location';
    location: LocationSpec_2;
};

/**
 * A parser, that is able to take the raw catalog descriptor data and turn it
 * into the actual result pieces. The default implementation performs a YAML
 * document parsing.
 * @public
 */
export declare type CatalogProcessorParser = (options: {
    data: Buffer;
    location: LocationSpec_2;
}) => AsyncIterable<CatalogProcessorResult>;

/** @public */
export declare type CatalogProcessorRefreshKeysResult = {
    type: 'refresh';
    key: string;
};

/** @public */
export declare type CatalogProcessorRelationResult = {
    type: 'relation';
    relation: EntityRelationSpec;
};

/** @public */
export declare type CatalogProcessorResult = CatalogProcessorLocationResult | CatalogProcessorEntityResult | CatalogProcessorRelationResult | CatalogProcessorErrorResult | CatalogProcessorRefreshKeysResult;

/* Excluded from this release type: catalogServiceRef */

/**
 * Entities that are not yet processed.
 * @public
 */
export declare type DeferredEntity = {
    entity: Entity;
    locationKey?: string;
};

/**
 * An EntityProvider is able to provide entities to the catalog.
 * See https://backstage.io/docs/features/software-catalog/life-of-an-entity for more details.
 * @public
 */
export declare interface EntityProvider {
    /** Unique provider name used internally for caching. */
    getProviderName(): string;
    /** Connect is called upon initialization by the catalog engine. */
    connect(connection: EntityProviderConnection): Promise<void>;
}

/**
 * The EntityProviderConnection is the connection between the catalog and the entity provider.
 * The EntityProvider use this connection to add and remove entities from the catalog.
 * @public
 */
export declare interface EntityProviderConnection {
    /**
     * Applies either a full or delta update to the catalog engine.
     */
    applyMutation(mutation: EntityProviderMutation): Promise<void>;
    /**
     * Schedules a refresh on all of the entities that has a matching refresh key associated with the provided keys.
     */
    refresh(options: EntityProviderRefreshOptions): Promise<void>;
}

/**
 * @public
 * A 'full' mutation replaces all existing entities created by this entity provider with new ones.
 * A 'delta' mutation can both add and remove entities provided by this provider. Previously provided
 * entities from a 'full' mutation are not removed.
 */
export declare type EntityProviderMutation = {
    type: 'full';
    entities: DeferredEntity[];
} | {
    type: 'delta';
    added: DeferredEntity[];
    removed: DeferredEntity[];
};

/**
 * @public
 */
export declare type EntityProviderRefreshOptions = {
    keys: string[];
};

/**
 * Holds the relation data for entities.
 *
 * @public
 */
export declare type EntityRelationSpec = {
    /**
     * The source entity of this relation.
     */
    source: CompoundEntityRef;
    /**
     * The type of the relation.
     */
    type: string;
    /**
     * The target entity of this relation.
     */
    target: CompoundEntityRef;
};

/**
 * Holds the entity location information.
 *
 * @remarks
 *
 *  `presence` flag: when using repo importer plugin, location is being created before the component yaml file is merged to the main branch.
 *  This flag is then set to indicate that the file can be not present.
 *  default value: 'required'.
 *
 * @public
 * @deprecated use the same type from `@backstage/plugin-catalog-common` instead
 */
export declare type LocationSpec = LocationSpec_2;

/**
 * Factory functions for the standard processing result types.
 *
 * @public
 */
export declare const processingResult: Readonly<{
    readonly notFoundError: (atLocation: LocationSpec_2, message: string) => CatalogProcessorResult;
    readonly inputError: (atLocation: LocationSpec_2, message: string) => CatalogProcessorResult;
    readonly generalError: (atLocation: LocationSpec_2, message: string) => CatalogProcessorResult;
    readonly location: (newLocation: LocationSpec_2) => CatalogProcessorResult;
    readonly entity: (atLocation: LocationSpec_2, newEntity: Entity) => CatalogProcessorResult;
    readonly relation: (spec: EntityRelationSpec) => CatalogProcessorResult;
    readonly refresh: (key: string) => CatalogProcessorResult;
}>;

export { }
