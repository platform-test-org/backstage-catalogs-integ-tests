'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var catalogClient = require('@backstage/catalog-client');
var errors = require('@backstage/errors');

const catalogProcessingExtensionPoint = backendPluginApi.createExtensionPoint({
  id: "catalog.processing"
});

const catalogServiceRef = backendPluginApi.createServiceRef({
  id: "catalog-client",
  defaultFactory: async (service) => backendPluginApi.createServiceFactory({
    service,
    deps: {
      discoveryApi: backendPluginApi.discoveryServiceRef
    },
    async factory() {
      return async ({ discoveryApi }) => {
        return new catalogClient.CatalogClient({ discoveryApi });
      };
    }
  })
});

const processingResult = Object.freeze({
  notFoundError(atLocation, message) {
    return {
      type: "error",
      location: atLocation,
      error: new errors.NotFoundError(message)
    };
  },
  inputError(atLocation, message) {
    return {
      type: "error",
      location: atLocation,
      error: new errors.InputError(message)
    };
  },
  generalError(atLocation, message) {
    return { type: "error", location: atLocation, error: new Error(message) };
  },
  location(newLocation) {
    return { type: "location", location: newLocation };
  },
  entity(atLocation, newEntity) {
    return { type: "entity", location: atLocation, entity: newEntity };
  },
  relation(spec) {
    return { type: "relation", relation: spec };
  },
  refresh(key) {
    return { type: "refresh", key };
  }
});

exports.catalogProcessingExtensionPoint = catalogProcessingExtensionPoint;
exports.catalogServiceRef = catalogServiceRef;
exports.processingResult = processingResult;
//# sourceMappingURL=index.cjs.js.map
