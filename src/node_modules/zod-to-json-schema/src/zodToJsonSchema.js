"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zodToJsonSchema = void 0;
const parseDef_1 = require("./parseDef");
const References_1 = require("./References");
const $schema = "http://json-schema.org/draft-07/schema#";
function zodToJsonSchema(schema, options) {
    var _a, _b, _c, _d;
    if (typeof options === "object") {
        const definitionsPath = (_a = options.definitionPath) !== null && _a !== void 0 ? _a : "definitions";
        const basePath = (_b = options.basePath) !== null && _b !== void 0 ? _b : [
            options.$refStrategy === "relative" ? "0" : "#",
        ];
        const mainPath = [
            ...basePath,
            ...(options.name === undefined ? [] : [definitionsPath, options.name]),
        ];
        let result = (0, parseDef_1.parseDef)(schema._def, new References_1.References(mainPath, [], (_c = options.$refStrategy) !== null && _c !== void 0 ? _c : "root", options.effectStrategy, options.target, undefined, options.strictUnions), options.definitions && {
            basePath,
            definitionsPath,
            definitions: options.definitions,
        });
        if (options.name !== undefined) {
            let definitions;
            if ((_d = result) === null || _d === void 0 ? void 0 : _d[definitionsPath]) {
                definitions = result[definitionsPath];
                delete result[definitionsPath];
            }
            result = {
                $ref: mainPath.join("/"),
                [definitionsPath]: Object.assign({ [options.name]: result }, definitions),
            };
        }
        if (options.target !== "openApi3") {
            result = Object.assign({ $schema }, result);
        }
        return result !== null && result !== void 0 ? result : {};
    }
    else if (typeof options === "string") {
        const name = options;
        return {
            $schema,
            $ref: `#/definitions/${name}`,
            definitions: {
                [name]: (0, parseDef_1.parseDef)(schema._def, new References_1.References(["#", "definitions", name])) ||
                    {},
            },
        };
    }
    else {
        return Object.assign({ $schema }, (0, parseDef_1.parseDef)(schema._def, new References_1.References()));
    }
}
exports.zodToJsonSchema = zodToJsonSchema;
